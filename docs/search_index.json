[["index.html", "Curso de Ingreso - Módulo Programación Guía de ejercicios", " Curso de Ingreso - Módulo Programación Guía de ejercicios Conceptos básicos de los programas imperativos Estructuras de control - Gráficos "],["clase01.html", "Clase 1 Introducción Ejercicios", " Clase 1 Introducción Esta es la guía de ejercicios correspondiente a la clase 01 (ver diapositivas). Deberá entregar todos los ejercicios resueltos en un archivo .R. Cada ejercicio debe estar resuelto entre comentarios que indique secciones dentro del archivo (en esta ocasión pueden usar el siguiente archivo como template para resolverlo: template-01.R). Algunos de los temas necesarios para resolver esta guía no fueron incluidos en la teórica, muchos se encuentran en este documento, mientras que otros deberán ser investigados (por ejemplo, buscando en internet). El ejercicio de buscar cómo abordar/resolver problemas en internet es casi tan importante como poder resolverlos. Además de escribir los programas pedidos deberán probarlos y dejar constancia de las pruebas realizadas, además de explicitar si anduvo como era esperado o no. Ejercicios Se desea tener un programa que dada la variable grados, que representa la temperatura en grados Farenheit, calcule en otra variable el valor en Celsius. Más info https://www.lmgtfy.es/?q=formula+formula+fahrenheit+a+celsius. grados &lt;- 90 enCelsius &lt;- (grados - 32) * 5/9 enCelsius ## [1] 32.22222 Escribir otro programa que se comporte a la inversa, es decir, que dada una variable que represente la temperatura en Celsius, calcule su equivalente en Farenheit. grados &lt;- 25 enFarenheit &lt;- grados * 9/5 + 32 enFarenheit ## [1] 77 Escribir un conversor de kilometros a millas. unosKilometros &lt;- 50 unasMillas &lt;- unosKilometros/1.609 unasMillas ## [1] 31.0752 Dado un cuadrado, que el largo de su base se encuentra guardado en una variable llamada base, calcular: El perímetro base &lt;- 30 perimetro &lt;- base * 4 perimetro ## [1] 120 El área base &lt;- 30 area &lt;- base * base area ## [1] 900 Idem anterior pero para un triangulo equilatero. base &lt;- 30 perimetro &lt;- base * 3 perimetro ## [1] 90 base &lt;- 30 area &lt;- sqrt(3)/4 * base^2 area ## [1] 389.7114 Asumiendo que los años tienen siempre 365 días, calcular: cuántos días vas a cumplir tu próximo cumpleaños, edad &lt;- 27 dias &lt;- 27 * 365 dias ## [1] 9855 cuántas horas vas a haber vivido, horas &lt;- dias * 60 horas ## [1] 591300 y cuántos segundos. segundos &lt;- horas * 60 segundos ## [1] 35478000 Se tienen las notas de 3 materias en sus respectivas variables: matematica, lengua, dibujo. Calcular el promedio de dichas notas. matematica &lt;- 6 lengua &lt;- 7 dibujo &lt;- 8 suma &lt;- matematica + lengua + dibujo promedio &lt;- suma / 3 promedio ## [1] 7 Repetir el ítem anterior, pero ahora con los valores guardados en un vector llamado notas. Hint: se puede acceder a los elementos de un vector con []. Ej: c(4, 6, 88)[2] nos da el valor 6. notas &lt;- c(6, 7, 8) suma &lt;- notas[1] + notas[2] + notas[3] promedio &lt;- suma / 3 promedio ## [1] 7 Si en el ítem anterior no usaste la función lenght() y sum(), volvé a resolverlo usandolas. notas &lt;- c(6, 7, 8) suma &lt;- sum(notas) cantidad &lt;- length(notas) promedio &lt;- suma / cantidad promedio ## [1] 7 Si en el ítem anterio al anterior no usaste la función mean(), volvé a resolverlo usandola. promedio &lt;- mean(notas) promedio ## [1] 7 Dadas dos variables, perro y gato escribir un programa que intercambie los valores de ambas variables. perro &lt;- 70 gato &lt;- -15 temporal &lt;- perro perro &lt;- gato gato &lt;- temporal perro ## [1] -15 gato ## [1] 70 # opcion sin variables extras perro &lt;- 70 gato &lt;- -15 perro &lt;- perro + gato gato &lt;- perro - gato perro &lt;- perro - gato perro ## [1] -15 gato ## [1] 70 Calcular el índice de masa corporal (IMC) de una persona cuya altura es 1.78m y su peso es 80kg. (IMC = peso / altura^2) peso &lt;- 80 altura &lt;- 1.78 imc &lt;- peso / altura^2 imc ## [1] 25.24934 Si tenemos los pesos y las alturas de personas en 2 vectores, calcular el IMC para cada uno. pesos &lt;- c(80, 70, 75, 94, 67) alturas &lt;- c(1.68, 1.75, 1.85, 1.90, 1.68) imcs &lt;- pesos / alturas^2 imcs ## [1] 28.34467 22.85714 21.91381 26.03878 23.73866 Sobre el cálculo del ejercicio anterior, encontrar el valor máximo, el mínimo, el promedio y la mediana de los IMCs. max(imcs) ## [1] 28.34467 min(imcs) ## [1] 21.91381 mean(imcs) ## [1] 24.57861 median(imcs) ## [1] 23.73866 "],["clase02.html", "Clase 2 Estructuras de control - Gráficos 2.1 Condicionales 2.2 Ciclos 2.3 Gráficos", " Clase 2 Estructuras de control - Gráficos Esta es la guía de ejercicios correspondiente a la clase 02 (ver diapositivas). Deberá entregar al menos todos los ejercicios indicados con una estrella (\\(\\bigstar\\)) en un archivo .R. Igualmente se recomienda realizar todos los ejercicios para ganar mayor habilidad en programación. Cada ejercicio debe estar resuelto entre comentarios que indique secciones dentro del archivo. Algunos de los temas necesarios para resolver esta guía no fueron incluidos en la teórica, muchos se encuentran en este documento, mientras que otros deberán ser investigados (por ejemplo, buscando en internet). El ejercicio de buscar cómo abordar/resolver problemas en internet es casi tan importante como poder resolverlos. Además de escribir los programas pedidos deberán probarlos y dejar constancia de las pruebas realizadas, además de explicitar si anduvo como era esperado o no. 2.1 Condicionales Completar el siguiente programa de manera tal que el valor de la variable a_es_mas_grande sea TRUE unicamente cuando la variable a es más grande que b y FALSE en caso contrario. a_es_mas_grande &lt;- COMPLETAR \\(\\bigstar\\) Completar el siguiente programa de manera tal que el valor de nombre_mas_grande sea el nombre de la variable cuyo valor es más grande entre a y b, en caso de ser iguales devolver cualquiera (puede ser siempre el mismo). if (COMPLETAR) { nombre_mas_grande &lt;- COMPLETAR } else { COMPLETAR } Modificar el programa anterior para que en caso de que sean iguales devuelva \"iguales\" if (COMPLETAR) { nombre_mas_grande &lt;- COMPLETAR } else { if (COMPLETAR) { COMPLETAR } else { COMPLETAR } } \\(\\bigstar\\) Escribir un programa que dado el valor guardado en la variable q, si dicho valor no es múltiplo de 3, entonces lo múltiplique por 3. En caso de serlo no debe modificarse. \\(\\bigstar\\) Completar el programa para que calcule un paso de la función de Collatz. Recordar que dice: \\[ collatz(n) = \\begin{cases} n/2 &amp;\\mbox{si n es par} \\\\ (3n + 1) &amp; \\mbox{si no } \\end{cases} \\] if (COMPLETAR) { nuevo_n &lt;- COMPLETAR } else { COMPLETAR } \\(\\bigstar\\) Dados 2 vectores de números v1 y v2 concatenarlos en una variable llamada res en el siguiente orden: si el primer elemento de v1 es menor que el primero de v2, entonces v1 y luego v2 sino al revés \\(\\bigstar\\) Dados 2 vectores de números v1 y v2 y una variable llamada cuenta escribir un programa que calcula en la variable res los siguiente: si cuenta vale la cadena de caracteres “promedio”, el promedio de todos los valores de v1 y v2, si cuenta vale la cadena de caracteres “minimo”, el mínimo entre todos los valores de v1 y v2, si cuenta vale la cadena de caracteres “minimo1”, el mínimo entre todos los valores de v1, para cualquier otro valor devolver la suma de todos los valores. Dados 2 vectores de números v1 y v2 concatenarlos en una variable llamada res de manera tal que el que primero que aparezca sea aquel cuya suma de elementos sea menor o igual que el otro. 2.2 Ciclos \\(\\bigstar\\) Completar el programa para que dado un vector de 10 posiciones llamado v cuente la cantidad de posiciones \\(i\\) cuyo valor es exactamente \\(i\\). res &lt;- 0 for (i in 1:10){ if (v[i] == COMPLETAR) { res &lt;- res + COMPLETAR } } Modificar el programa anterior para que acepte vectores de cualquier longitud. Pista: puede usar la función length para obtener la longitud del vector. \\(\\bigstar\\) Modificar el programa anterior para que además, en caso de que no cumpla con que la posición \\(i\\) valga \\(i\\), reemplace dicho valor por un cero. \\(\\bigstar\\) El siguiente programa recorre un vector v hasta encontrar un elemento que cumpla con tener como valor la posición. Dicho valor queda en la variable i. Experimentar con este programa teniendo en cuenta 2 casos: que existe y que no una posición que cumpla. i &lt;- 1 while (v[i] != i){ i &lt;- i + 1 } Arreglar el programa anterior para que en caso de que no exista, el programa termine sin dar error. Pista: antes de la condición diga v[i] debemos asegurarnos que i es una posición válida, es decir, es menor o igual que la longitud del vector. i &lt;- 1 while (COMPLETAR &amp; v[i] != i){ i &lt;- i + 1 } Podemos verificar si existe o no dicho elemento en el ejercicio anterior mirando el valor de i. Si el valor es una posición válida de v entonces sí existe. Completar el programa para que en una variable existe_i determine con TRUE/FALSE la existencia de dicho valor. i &lt;- 1 while (COMPLETAR &amp; v[i] != i){ i &lt;- i + 1 } existe &lt;- FALSE if (COMPLETAR) { existe &lt;- TRUE } \\(\\bigstar\\) Dados dos dados (de 6 caras que valen de 1 a 6), uno azul y uno rojo, calcular con un programa cuantas combinaciones posibles de valores hay. Pista: debería dar 6*6=36. ;-) contar &lt;- COMPLETAR for (dado_azul in 1:6){ for (dado_rojo in COMPLETAR){ contar &lt;- contar + COMPLETAR } } \\(\\bigstar\\) Con el mismo par de dados, calcular con un programa cuantas combinaciones tienen los 2 dados iguales. Con el mismo par de dados, calcular con un programa cuantas combinaciones suman 10. \\(\\bigstar\\) Dado un vector de los primeros n naturales, escribir un programa que calcule para cada elemento el cuadrado de dicho valor en un nuevo vector. valores_n &lt;- COMPLETAR valores_cuadrado &lt;- c() for (i in COMPLETAR) { valores_cuadrado &lt;- c(valores_cuadrado, COMPLETAR) } Dado un vector de los primeros n números pares naturales, escribir un programa que calcule para cada elemento el cuadrado de dicho valor, si es múltiplo de 4, sino que lo divida por 2. 2.3 Gráficos Dados los valores calculados en el ejecicio anterior, graficarlos con el comando plot \\(\\bigstar\\) Escribir un programa que calcule y grafique los primeros 10 términos de las siguientes sucesiones: \\(a_n = \\displaystyle\\frac{1}{\\sqrt{n}}+\\left(\\frac{1}{2}\\right)^n\\) \\(d_n = (-1)^{n+5}\\) \\(\\bigstar\\) Retomando el ejercicio de las combinaciones de los dados, escribir un programa que inicie con un vector llamado cantidad de doce posiciones en cero (explorar el comando rep) y que para cada posición calcule cuántas combinaciones de los dados suman el valor indicado por la posición (ej. cantidad[11] vale 2, que son: (5,6) y (6,5)). Graficar los datos obtenidos. Hacé un gráfico que refleje la evolución de la temperatura del agua a lo largo del tiempo atendiendo a la siguiente descripción: Saqué del fuego una cacerola con agua hirviendo. Al principio, la temperatura bajó con rapidez, de modo que a los 5 minutos estaba en 60 grados. Luego, fue enfriándose con más lentitud. A los 20 minutos de haberla sacado estaba en 30 grados y 20 minutos después seguía teniendo algo más de 20 grados, temperatura que se mantuvo, pues era la temperatura que había en la cocina. \\(\\bigstar\\) Graficar la función \\(\\rho(x)=x^2\\), para \\(x\\in [-10,10]\\). x &lt;- seq(COMPLETAR, COMPLETAR, 0.01) valores &lt;- c() for (i in x){ nuevo_valor &lt;- COMPLETAR valores &lt;- COMPLETAR } plot(n, valores, type = &quot;p&quot;) Graficar la función \\(\\rho(x)=|x|\\), para \\(x\\in [-10,10]\\). \\(\\bigstar\\) Considerar \\(\\rho_k: \\mathbb R \\to \\mathbb R\\), definida de la siguiente manera \\[\\begin{align*} \\rho_k(x)=\\left\\{ \\begin{matrix} x^2&amp;\\text{ si } &amp;|x|\\le k \\\\ 2k|x|-k^2 &amp; \\text{ si } &amp; |x| &gt;k \\end{matrix} \\right. \\end{align*}\\] Calcular y graficar la la función \\(\\rho_k\\), con \\(k=5\\), para \\(x\\in [-10,10]\\). En el mismo gráfico agregar el valor de la función \\(\\rho_k\\) para \\(k=2\\) y \\(k=8\\) utilizando un color diferente para cada valor de \\(k\\) "]]
